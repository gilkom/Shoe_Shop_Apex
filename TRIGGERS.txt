create or replace trigger BUTY_KLIENCI_BIU
  before insert on buty_klienci
for each row
declare
  v_customer_id buty_klienci.numer_klienta%type;
begin
  select max(numer_klienta) into v_customer_id from buty_klienci;
    if v_customer_id is null then
      :new.numer_klienta := 1;
    else  
      :new.numer_klienta := v_customer_id+1;
    end if;
end;

create or replace TRIGGER  "BUTY_PRODUKTY_BIU" 
  before insert on BUTY_PRODUKTY
for each row
declare
  V_PRODUKTY BUTY_PRODUKTY.NUMER_PRODUKTU%TYPE;
begin
  select max(NUMER_PRODUKTU) into V_PRODUKTY from BUTY_PRODUKTY;
    if V_PRODUKTY is null then
      :new.NUMER_PRODUKTU := 1;
    else  
      :new.NUMER_PRODUKTU := V_PRODUKTY+1;
    end if;
end;

create or replace TRIGGER  "BUTY_rodzaje_produktow_BIU" 
  before insert on BUTY_RODZAJE_PRODUKTOW
for each row
declare
  V_RODZAJ_PRODUKTU BUTY_RODZAJE_PRODUKTOW.RODZAJ_PRODUKTU%TYPE;
begin
  select max(RODZAJ_PRODUKTU) into V_RODZAJ_PRODUKTU from BUTY_RODZAJE_PRODUKTOW;
    if V_RODZAJ_PRODUKTU is null then
      :new.RODZAJ_PRODUKTU := 1;
    else  
      :new.RODZAJ_PRODUKTU := V_RODZAJ_PRODUKTU+1;
    end if;
end;

create or replace trigger BUTY_ZAMOWIENIA_BI
  before insert on BUTY_ZAMOWIENIA
for each row
declare
  V_NR_ZAMOWIENIA BUTY_ZAMOWIENIA.NR_ZAMOWIENIA%type;
begin
  select max(NR_ZAMOWIENIA) into V_NR_ZAMOWIENIA from BUTY_ZAMOWIENIA;
    if V_NR_ZAMOWIENIA is null then
      :new.NR_ZAMOWIENIA := 1;
    else  
      :new.NR_ZAMOWIENIA := V_NR_ZAMOWIENIA+1;
    end if;
    :new.STATUS_ZAMOWIENIA := 'OTWARTE';
    :new.numer_pracownika := NVL(v('APP_USER'),USER);
    :new.wartosc_zamowienia := 0;
	update BUTY_AKTUALNY_NR_ZAMOWIENIA
        set NR_ZAMOWIENIA = :new.NR_ZAMOWIENIA;
end;

create or replace TRIGGER  "BUTY_ZAMOWIENIA_SZCZEGOLY_BIU" 
  before insert or update on BUTY_ZAMOWIENIA_SZCZEGOLY
for each row
declare
  V_NR_ZAMOWIENIA BUTY_ZAMOWIENIA.NR_ZAMOWIENIA%TYPE;
  V_POZYCJA_ZAMOWIENIA BUTY_ZAMOWIENIA_SZCZEGOLY.POZYCJA_ZAMOWIENIA%TYPE;
  V_CENA_ZAKUPU BUTY_ZAMOWIENIA_SZCZEGOLY.CENA_ZAKUPU%TYPE;
begin
if INSERTING then
  SELECT NR_ZAMOWIENIA INTO V_NR_ZAMOWIENIA FROM BUTY_AKTUALNY_NR_ZAMOWIENIA;
  IF V_NR_ZAMOWIENIA IS NULL THEN
    :NEW.NR_ZAMOWIENIA := 1;
    V_NR_ZAMOWIENIA := 1;
  ELSE
    :NEW.NR_ZAMOWIENIA := V_NR_ZAMOWIENIA;
  END IF;

  SELECT COUNT(*) INTO V_POZYCJA_ZAMOWIENIA FROM BUTY_ZAMOWIENIA_SZCZEGOLY
  WHERE NR_ZAMOWIENIA = V_NR_ZAMOWIENIA;
  
  IF V_POZYCJA_ZAMOWIENIA = 0 THEN
    :NEW.POZYCJA_ZAMOWIENIA :=1;
  ELSE
    :NEW.POZYCJA_ZAMOWIENIA := V_POZYCJA_ZAMOWIENIA + 1;
  END IF;
  
  SELECT CENA_PRODUKTU INTO :NEW.CENA_ZAKUPU FROM BUTY_PRODUKTY
  WHERE NUMER_PRODUKTU = :NEW.NUMER_PRODUKTU;
  UPDATE BUTY_ZAMOWIENIA
    SET WARTOSC_ZAMOWIENIA = NVL(WARTOSC_ZAMOWIENIA, 0) + (:NEW.CENA_ZAKUPU * :NEW.ILOSC_ZAKUPIONA)
  WHERE NR_ZAMOWIENIA = :NEW.NR_ZAMOWIENIA;
  
  :NEW.WARTOSC_POZYCJI := :NEW.CENA_ZAKUPU * :NEW.ILOSC_ZAKUPIONA;

  END IF;

if UPDATING then

  SELECT CENA_PRODUKTU INTO :NEW.CENA_ZAKUPU FROM BUTY_PRODUKTY
    WHERE NUMER_PRODUKTU = :NEW.NUMER_PRODUKTU;
    
  UPDATE BUTY_ZAMOWIENIA
    SET WARTOSC_ZAMOWIENIA = WARTOSC_ZAMOWIENIA - (:OLD.CENA_ZAKUPU * :OLD.ILOSC_ZAKUPIONA)
      WHERE NR_ZAMOWIENIA = :OLD.NR_ZAMOWIENIA;
  UPDATE BUTY_ZAMOWIENIA
    SET WARTOSC_ZAMOWIENIA = WARTOSC_ZAMOWIENIA + (:NEW.CENA_ZAKUPU * :NEW.ILOSC_ZAKUPIONA)
      WHERE NR_ZAMOWIENIA = :NEW.NR_ZAMOWIENIA;

end if;  

END;

create or replace TRIGGER  "BUTY_ZAMOWIENIA_SZCZEGOLY_DEL" 
  for delete on BUTY_ZAMOWIENIA_SZCZEGOLY
COMPOUND TRIGGER

V_NR_ZAMOWIENIA BUTY_ZAMOWIENIA.NR_ZAMOWIENIA%TYPE;

AFTER EACH ROW IS
BEGIN
  UPDATE BUTY_ZAMOWIENIA
    SET WARTOSC_ZAMOWIENIA = WARTOSC_ZAMOWIENIA - (:OLD.CENA_ZAKUPU * :OLD.ILOSC_ZAKUPIONA)
  WHERE NR_ZAMOWIENIA = :OLD.NR_ZAMOWIENIA;
  V_NR_ZAMOWIENIA := :OLD.NR_ZAMOWIENIA;

END AFTER EACH ROW;

AFTER STATEMENT IS
BEGIN
  UPDATE BUTY_ZAMOWIENIA_SZCZEGOLY
    SET POZYCJA_ZAMOWIENIA = ROWNUM
  WHERE NR_ZAMOWIENIA = V_NR_ZAMOWIENIA;

 END AFTER STATEMENT;
end;